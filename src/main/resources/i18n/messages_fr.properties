# Default language: English

# Header information
welcome=Bienvenue dans l'Application Web Moderne
app.title=Application Web Moderne
navbar.health=Santé

# HTTP Debug & Interactive HTTP Testing
card.debug.title=Tests interactifs et Débogage HTTP
card.debug.subtitle=Outil éducatif Côté Client
card.debug.description=Cette section démontre les requêtes et réponses HTTP en utilisant l'API Fetch de JavaScript. Toutes les interacctions ci-dessous montreront une véritable communication HTTP en action!
card.web.title=Salutation de la page web
card.web.subtitle=Testez la page principale avec une salutation personnalisée
card.api.title=Points d'Accés API
card.api.subtitle=Testez l'API REST avec une réponse JSON
card.health.title=Vérification de Santé
card.health.subtitle=Testez l'endpoint de santé de l'application

# Buttons
btn.testWeb=Tester la Page Web
btn.testAPI=Tester /api/hello
btn.testHealth=Tester /actuator/health
btn.devTools=Comment ouvrir les Outils de Développement

# HTTP Request/Response Display
debug.httpRequest=Requête HTTP
debug.httpResponse=Réponse HTTP
debug.tryRequest=Cliquez sur le bouton de test pour voir les détails de la requête HTTP...
debug.tryResponse=Cliquez sur le bouton de test pour voir les détails de la réponse HTTP...

# Notes
notes.title=Notes d'Apprentissage
notes.fetchAPI=Fetch API: Méthode moderne en JavaScript pour effectuer way to make HTTP requests
notes.promisedBased=Basé sur des Promesses: Opérations asynchrones avec .then() et async/await
notes.jsonResponse=Réponse JSON: Les endpoints de l'API renvoient des données structurées
notes.statusCodes=Codes de Statut: 200 = succès, 404 = non trouvé, 500 = erreur serveur
notes.Headers=En-têtes: Métadonnées envoyées avec chaque requête et réponse

# Footer
footer.text=&copy; 2025 Application Web Moderne. Construit avec Spring Boot 3.5.3 et Kotlin 2.2.10
