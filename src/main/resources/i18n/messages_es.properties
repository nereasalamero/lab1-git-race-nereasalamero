# Language: Espa�ol

# Header information
welcome=Bienvenido a la Aplicación Web Moderna
app.title=Aplicación Web Moderna
navbar.health=Salud

# HTTP Debug & Interactive HTTP Testing
card.debug.title=Pruebas interactivas y depuración HTTP
card.debug.subtitle=Herramienta educativa del cliente
card.debug.description=This section demonstrates HTTP requests and responses using JavaScript Fetch API. All interactions below will show real HTTP communication in action!
card.web.title=Saludo de la página web
card.web.subtitle=Prueba la página web principal con un saludo personalizado
card.api.title=Puntos de acceso API
card.api.subtitle=Prueba la API REST con respuesta JSON
card.health.title=Comprobador de salud
card.health.subtitle=Prueba el endpoint de salud de la aplicación

# Buttons
btn.testWeb=Probar página web
btn.testAPI=Probar /api/hello
btn.testHealth=Probar /actuator/health
btn.devTools=Cómo abrir Herramientas de Desarrollador

# HTTP Request/Response Display
debug.httpRequest=Petición HTTP
debug.httpResponse=Respuesta HTTP
debug.tryRequest=Haz clic en el botón de prueba para ver los detalles de la petición HTTP...
debug.tryResponse=Haz clic en el botón de prueba para ver los detalles de la respuesta HTTP...

# Notes
notes.title=Notas de aprendizaje
notes.fetchAPI=Fetch API: Forma moderna en JavaScript para hacer peticiones HTTP
notes.promisedBased=Basado en promesas: Operaciones asíncronas usando .then() y async/await
notes.jsonResponse=Respuesta JSON: Los endpoints de la API devuelven datos estructurados
notes.statusCodes=Códigos de Estado: 200 = éxito, 404 = no encontrado, 500 = error de servidor
notes.Headers=Cabeceras: Metadatos enviados con cada petición y respuesta

# Footer
footer.text=2025 Aplicación Web Moderna. Construida con Spring Boot 3.5.3 y Kotlin 2.2.10
